stages:
- test
- build
- release

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_LATEST_TAG: latest
  # local
  DOCKER_IMAGE_TEST: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME
  DOCKER_IMAGE_LATEST: $CI_REGISTRY/$CI_PROJECT_PATH:$DOCKER_LATEST_TAG      # latest
  DOCKER_IMAGE_DEVELOP: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME    # develop and branches
  DOCKER_IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_TAG             # releases (tags)
  # hub
  DOCKER_HUB_IMAGE_TEST: $DOCKER_HUB_REPO:$CI_COMMIT_REF_NAME
  DOCKER_HUB_IMAGE_LATEST: $DOCKER_HUB_REPO:$DOCKER_LATEST_TAG
  DOCKER_HUB_IMAGE_DEVELOP: $DOCKER_HUB_REPO:$CI_COMMIT_REF_NAME
  DOCKER_HUB_IMAGE_TAG: $DOCKER_HUB_REPO:$CI_COMMIT_TAG

  # UV
  UV_VERSION: "0.7.13"
  PYTHON_VERSION: "3.13"
  BASE_LAYER: alpine
  # GitLab CI creates a separate mountpoint for the build directory,
  # so we need to copy instead of using hard links.
  UV_LINK_MODE: copy

# Global jobs
test-style:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: test
  script:
    - uvx flake8 vss_cli/
  tags:
    - python-3

build-dist:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: build
  script:
    - uv build
  only:
    - develop
    - branches
    - main
    - tags
  tags:
   - python-3
  artifacts:
    expire_in: 1 week
    paths:
      - dist

build-docker-local:
  stage: build
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -f docker/Dockerfile --pull --build-arg CI_BUILD_REF=$CI_BUILD_REF -t $DOCKER_IMAGE_TEST .
    - docker push $DOCKER_IMAGE_TEST
  only:
    - develop
    - branches
    - main
    - tags
  tags:
    - docker
    - dind

build-docker-hub:
  stage: build
  before_script:
    - docker info
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_USER_PASS
  script:
    - docker build -f docker/Dockerfile --pull --build-arg CI_BUILD_REF=$CI_BUILD_REF -t $DOCKER_HUB_IMAGE_TEST .
    - docker push $DOCKER_HUB_IMAGE_TEST
  only:
    - develop
    - main
    - tags
  tags:
    - docker
    - dind

# Develop/branches
test-code-develop:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: test
  script:
    - apk add --update --no-cache git libxml2-dev libxslt-dev gcc python3-dev rust musl-dev
    - uv sync --locked --all-extras
#    - nosetests -v --cover-package=vss_cli --with-coverage --cover-branches --cover-erase --cover-html --cover-html-dir=coverage
  tags:
    - python-3
  only:
    - develop
    - branches
  artifacts:
    expire_in: 1 week
    paths:
      - coverage/

build-docs-develop:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: build
  script:
    - apk add --update --no-cache git libxml2-dev libxslt-dev gcc python3-dev musl-dev make
    - uv venv && source .venv/bin/activate
    - uv pip install git+https://gitlab-ee.eis.utoronto.ca/vss/py-vss.git@develop
    - uv sync --locked --all-extras && uv pip install .[dev]
    - sphinx-build -b html docs docs/_build/html
    - sphinx-build -b man docs docs/_build/man
    - export CONFLUENCE_DRYRUN=1 && sphinx-build -b confluence docs docs/_build/confluence -E -a
    - mkdir -p ./public && mkdir -p ./man && mkdir -p ./confluence
    - cp -r docs/_build/man docs/_build/html/
    - cp -r docs/_build/html/* ./public
    - cp -r docs/_build/man/* ./man
  artifacts:
    expire_in: 1 week
    paths:
     - public
     - man
  only:
    - develop
  tags:
    - python-3

release-dist-develop:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: release
  script:
    - uv publish --token ${UV_PUBLISH_TOKEN} dist/*
  dependencies:
    - build-dist
  only:
    - develop
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /Version release/
      - $CI_COMMIT_MESSAGE =~ /Homebrew formula/
  tags:
   - python-3

release-dist-develop-local:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: release
  script:
   - uv publish --username=gitlab-ci-token --password ${CI_JOB_TOKEN} --publish-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  dependencies:
    - build-dist
  only:
    - develop
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /Version release/
      - $CI_COMMIT_MESSAGE =~ /Homebrew formula/
  tags:
   - python-3

release-checkin-develop:
  image: hub.eis.utoronto.ca/vss/docker/python:3-alpine
  stage: release
  script:
    - python -V
    - apk add --update --no-cache git libxml2-dev libxslt-dev gcc python3-dev musl-dev curl
    - pip install nose coverage pytz git+https://gitlab-ee.eis.utoronto.ca/vss/py-vss.git@develop
    - uv sync --locked --all-extras
    - export VSSCLI_VERSION=$(python -c "from vss_cli.const import __version__; print(__version__)")
    - "curl -X PUT $_VSS_API_CI_ENDPOINT_DEV -d '{\"version\": \"'\"${VSSCLI_VERSION}\"'\", \"git_sha\": \"'\"${CI_COMMIT_SHA}\"'\"}' -H \"Authorization: Bearer $_VSS_API_CI_TOKEN_DEV\""
  tags:
    - python-3
  only:
    - develop
  when: manual

release-docs-develop:
  image: hub.eis.utoronto.ca/vss/docker/python:3
  stage: release
  script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$DOCS_SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  - mkdir -p /root/.ssh
  - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > /root/.ssh/known_hosts'
  - echo "$DOCS_SSH_PRIVATE_KEY" > /root/.ssh/id_rsa
  - chmod 600 /root/.ssh/id_rsa && chmod 700 /root/.ssh
  - scp -r public/* $SSH_USER@$SSH_SERVER:$DOCS_DEV_SSH_PATH
  dependencies:
  - build-docs-develop
  only:
  - develop
  tags:
   - python-3

release-docker-local-develop:
  stage: release
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $DOCKER_IMAGE_TEST
    - docker tag $DOCKER_IMAGE_TEST $DOCKER_IMAGE_DEVELOP
    - docker push $DOCKER_IMAGE_DEVELOP
  dependencies:
    - build-docker-local
  only:
    - develop
    - branches
  tags:
    - docker
    - dind

release-docker-hub-develop:
  stage: release
  before_script:
    - docker info
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_USER_PASS
  script:
    - docker pull $DOCKER_HUB_IMAGE_TEST
    - docker tag $DOCKER_HUB_IMAGE_TEST $DOCKER_HUB_IMAGE_DEVELOP
    - docker push $DOCKER_HUB_IMAGE_DEVELOP
  dependencies:
    - build-docker-hub
  only:
    - develop
  tags:
    - docker
    - dind

# Master
test-code-main:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: test
  script:
    - apk add --update --no-cache git libxml2-dev libxslt-dev gcc python3-dev rust musl-dev
    - uv sync --locked --all-extras
#    - nosetests -v --cover-package=vss_cli --with-coverage --cover-branches --cover-erase --cover-html --cover-html-dir=coverage
  tags:
    - python-3
  only:
    - main
    - tags
  artifacts:
    expire_in: 1 week
    paths:
      - coverage/

build-docs-main:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: build
  script:
    - apk add --update --no-cache git libxml2-dev libxslt-dev gcc python3-dev musl-dev make
    - uv venv && source .venv/bin/activate
    - uv sync --locked --all-extras && uv pip install .
    - sphinx-build -b html docs docs/_build/html
    - sphinx-build -b man docs docs/_build/man
    - export CONFLUENCE_DRYRUN=1 && sphinx-build -b confluence docs docs/_build/confluence -E -a
    - mkdir -p ./public && mkdir -p ./man && mkdir -p ./confluence
    - cp -r docs/_build/man docs/_build/html/
    - cp -r docs/_build/html/* ./public
    - cp -r docs/_build/man/* ./man
  artifacts:
    expire_in: 1 week
    paths:
     - public
     - man
  only:
    - main
  tags:
    - python-3

release-docker-local-main:
  stage: release
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $DOCKER_IMAGE_TEST
    - docker tag $DOCKER_IMAGE_TEST $DOCKER_IMAGE_LATEST
    - docker push $DOCKER_IMAGE_LATEST
  dependencies:
    - build-docker-local
  only:
    - main
  tags:
    - docker
    - dind

release-docker-hub-main:
  stage: release
  before_script:
    - docker info
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_USER_PASS
  script:
    - docker pull $DOCKER_HUB_IMAGE_TEST
    - docker tag $DOCKER_HUB_IMAGE_TEST $DOCKER_HUB_IMAGE_LATEST
    - docker push $DOCKER_HUB_IMAGE_LATEST
  dependencies:
    - build-docker-hub
  only:
    - main
  tags:
    - docker
    - dind

# Releases
# PEP-440 compliant version (tags)

release-dist-tag:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: release
  script:
    - uv publish --token ${UV_PUBLISH_TOKEN} dist/*
  dependencies:
    - build-dist
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/
  tags:
   - python-3

release-dist-tag-local:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: release
  script:
    - uv publish --username=gitlab-ci-token --password ${CI_JOB_TOKEN} --publish-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  dependencies:
    - build-dist
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/
  tags:
   - python-3

release-checkin-tag:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: release
  script:
    - uv sync --locked --all-extras
    - export VSSCLI_VERSION=$(python -c "from vss_cli.const import __version__; print(__version__)")
    - "curl -X PUT $_VSS_API_CI_ENDPOINT_PROD -d '{\"version\": \"'\"${VSSCLI_VERSION}\"'\", \"git_sha\": \"'\"${CI_COMMIT_SHA}\"'\"}' -H \"Authorization: Bearer $_VSS_API_CI_TOKEN_PROD\""
  tags:
    - python-3
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/
  when: manual

build-docs-tag:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: build
  script:
    - apk add --update --no-cache git libxml2-dev libxslt-dev gcc python3-dev musl-dev make
    - uv venv && source .venv/bin/activate
    - uv sync --locked --all-extras && uv pip install .
    - sphinx-build -b html docs docs/_build/html
    - sphinx-build -b man docs docs/_build/man
    - export CONFLUENCE_DRYRUN=1 && sphinx-build -b confluence docs docs/_build/confluence -E -a
    - mkdir -p ./public && mkdir -p ./man && mkdir -p ./confluence
    - cp -r docs/_build/man docs/_build/html/
    - cp -r docs/_build/html/* ./public
    - cp -r docs/_build/man/* ./man
    - cp -r docs/_build/confluence/* ./confluence
  artifacts:
    expire_in: 1 week
    paths:
     - public
     - man
     - confluence
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/
  tags:
    - python-3

release-docs-tag-confluence:
  image: hub.eis.utoronto.ca/vss/docker/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  stage: release
  script:
    - uv sync --locked --all-extras
    - export CONFLUENCE_DRYRUN= && /app/.venv/bin/sphinx-build -b confluence docs docs/_build/confluence -E -a
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/
  tags:
    - python-3

release-docs-tag:
  image: hub.eis.utoronto.ca/vss/docker/python:3
  stage: release
  script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$DOCS_SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  - mkdir -p /root/.ssh
  - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > /root/.ssh/known_hosts'
  - echo "$DOCS_SSH_PRIVATE_KEY" > /root/.ssh/id_rsa
  - chmod 600 /root/.ssh/id_rsa && chmod 700 /root/.ssh
  - scp -r public/* $SSH_USER@$SSH_SERVER:$DOCS_SSH_PATH
  dependencies:
    - build-docs-tag
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/
  tags:
    - python-3

release-docker-hub-tag:
  stage: release
  before_script:
    - docker info
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_USER_PASS
  script:
    - docker pull $DOCKER_HUB_IMAGE_TEST
    - docker tag $DOCKER_HUB_IMAGE_TEST $DOCKER_HUB_IMAGE_TAG
    - docker push $DOCKER_HUB_IMAGE_TAG
  dependencies:
    - build-docker-hub
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/
  tags:
    - docker
    - dind